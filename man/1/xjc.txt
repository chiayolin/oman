xjc(1)									xjc(1)



NAME
       xjc - Java XML Binding Compiler

SYNOPSIS
       xjc [ -options ] <schema_file/URL/dir>... [ -b <bindinfo> ]...

PARAMETERS
       options	      Command-line options.

       <schema_file/URL/dir>
		      Specify  one  or	more  schema  files to compile. If you
		      specify a directory, then  xjc  will  scan  it  for  all
		      schema files and compile them.

       <bindinfo>     External binding file to process.


OPTIONS
       -nv By  default, the XJC binding compiler performs strict validation of
	   the source schema before processing it. Use this option to  disable
	   strict  schema validation. This does not mean that the binding com-
	   piler will not perform any validation, it simply means that it will
	   perform less-strict validation.

       -extension
	   By  default,  the  XJC binding compiler strictly enforces the rules
	   outlined in the Compatibility chapter of  the  JAXB	Specification.
	   Appendix  E.2 defines a set of W3C XML Schema features that are not
	   completely supported by JAXB v1.0.	In  some  cases,  you  may  be
	   allowed  to	use  them  in  the  "-extension"  mode enabled by this
	   switch.  In the default (strict) mode,  you	are  also  limited  to
	   using only the binding customizations defined in the specification.
	   By using the "-extension" switch, you will be allowed  to  use  the
	   JAXB Vendor Extensions

       -b <file>
	   Specify  one or more external binding files to process. (Each bind-
	   ing file must have its own "-b" switch.)  The syntax of the	exter-
	   nal	binding  files	is  extremely  flexible. You may have a single
	   binding file that contains customizations for multiple  schemas  or
	   you can break the customizations into multiple bindings files:

	   xjc schema1.xsd schema2.xsd schema3.xsd -b bindings123.xjb
	   xjc	schema1.xsd  schema2.xsd schema3.xsd -b bindings1.xjb -b bind-
	   ings2.xjb -b bindings3.xjb

	   In addition, the ordering of the schema files and binding files  on
	   the command line does not matter.

       -d <dir>
	   By default, the XJC binding compiler will generate the Java content
	   classes in the current directory. Use this  option  to  specify  an
	   alternate  output  directory.  The  output  directory  must already
	   exist, the XJC binding compiler will not create it for you.

       -p <pkg>
	   Specifying a target package via this command-line option  overrides
	   any	binding customization for package name and the default package
	   name algorithm defined in the specification.

       -httpproxy <proxy>
	   Specify the HTTP/HTTPS proxy. The format is [user[:password]@]prox-
	   yHost[:proxyPort].	The old -host and -port are still supported by
	   the RI for backwards compatibility, but they have been  deprecated.
	   Note  that  the  password specified with this option is an argument
	   that is visible to other users who use the top command,  for  exam-
	   ple. For greater security, use -httpproxyfile, below.

       -httpproxyfile <file>
	   Specify  the  HTTP/HTTPS  proxy using a file. Same format as above,
	   but the password specified in the file  is  not  visible  to  other
	   users.

       -classpath <arg>
	   Specify  where  to  find client application class files used by the
	   <jxb:javaType> and <xjc:superClass> customizations.

       -catalog <file>
	   Specify catalog files to resolve external entity references.   Sup-
	   ports  TR9401, XCatalog, and OASIS XML Catalog format.  Please read
	   the XML Entity and URI Resolvers document or  the  catalog-resolver
	   sample application.

       -readOnly
	   By  default,  the  XJC  binding compiler does not write-protect the
	   Java source files it generates. Use this option to  force  the  XJC
	   binding compiler to mark the generated Java sources read-only.

       -npa
	   Supress  the  generation of package level annotations into **/pack-
	   age-info.java.  Using this switch  causes  the  generated  code  to
	   internalize those annotations into the other generated classes.

       -xmlschema
	   Treat  input  schemas  as  W3C  XML Schema (default). If you do not
	   specify this switch, your input schemas will be treated as W3C  XML
	   Schema.

       -relaxng
	   Treat  input  schemas as RELAX NG (experimental, unsupported). Sup-
	   port for RELAX NG schemas is provided as a JAXB Vendor Extension.

       -relaxng-compact
	   Treat input schemas as RELAX NG compact syntax(experimental, unsup-
	   ported).  Support for RELAX NG schemas is provided as a JAXB Vendor
	   Extension.

       -dtd
	   Treat input schemas as XML DTD (experimental, unsupported). Support
	   for RELAX NG schemas is provided as a JAXB Vendor Extension.

       -wsdl
	   Treat  input  as  WSDL  and	compile  schemas inside it (experimen-
	   tal,unsupported).

       -quiet
	   Suppress compiler output, such as progress  information  and  warn-
	   ings.

       -verbose
	   Be  extra  verbose, such as printing informational messages or dis-
	   playing stack traces upon some errors.

       -help
	   Display a brief summary of the compiler switches.

       -version
	   Display the compiler version information.


   Summary of Deprecated and Removed Command Line Options
       -host & -port
	   These options have been deprecated and replaced with the -httpproxy
	   option.  For  backwards  compatibility, we will continue to support
	   these options, but they will no longer be  documented  and  may  be
	   removed from future releases.

       -use-runtime
	   Since the JAXB 2.0 specification has defined a portable runtime, it
	   is no longer necessary for the JAXB RI to generate  **/impl/runtime
	   packages.  Therefore, this switch is obsolete and has been removed.

       -source
	   The -source compatibility switch was introduced in the  first  JAXB
	   2.0	Early  Access  release.  We have decided to remove this switch
	   from future releases of JAXB 2.0. If you  need  to  generate  1.0.x
	   code, please use an installation of the 1.0.x codebase.

       -Xlocator & -Xsync-methods
	   These  switches  have  been	disabled for now. We plan on releasing
	   this functionality as a separate download in the future.


   Compiler Restrictions
       In general, it is safest to compile all related	schemas  as  a	single
       unit with the same binding compiler switches.

       Please  keep  the  following  list of restrictions in mind when running
       xjc. Most of these issues only apply when  compiling  multiple  schemas
       with multiple invocations of xjc.

	  o To	compile  multiple schemas at the same time, keep the following
	    precedence rules for the target Java package name in mind:

	     1. The "-p" command line option takes the highest precedence.

	     2. <jaxb:package> customization

	     3. If targetNamespace is declared, apply targetNamespace ->  Java
		package name algorithm defined in the specification.

	     4. If  no	targetNamespace  is  declared, use a hardcoded package
		named "generated".


	  o It is not legal to have more  than	one  jaxb:schemaBindings>  per
	    namespace,	so  it	is  impossible to have two schemas in the same
	    target namespace compiled into different Java packages.

	  o All schemas being compiled into the same Java package must be sub-
	    mitted  to the XJC binding compiler at the same time - they cannot
	    be compiled independently and work as expected.

	  o Element substitution groups spread across  multiple  schema  files
	    must be compiled at the same time.



				  07 Aug 2006				xjc(1)
