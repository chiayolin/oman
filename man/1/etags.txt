etags(1)			   GNU Tools			      etags(1)



NAME
       etags, ctags - generate tag file for Emacs, vi

SYNOPSIS
       etags [-aCDGIRVh] [-i file] [-l language]
       [-o tagfile] [-r regexp] [--parse-stdin=file]
       [--append] [--no-defines] [--no-globals] [--include=file]
       [--ignore-indentation] [--language=language] [--no-members]
       [--output=tagfile] [--regex=regexp] [--no-regex] [--help] [--version]
       file ...

       ctags [-aCdgIRVh] [-BtTuvwx] [-l language]
       [-o tagfile] [-r regexp] [--parse-stdin=file]
       [--append] [--backward-search] [--cxref] [--defines] [--forward-search]
       [--globals] [--ignore-indentation] [--language=language] [--members]
       [--output=tagfile] [--regex=regexp] [--typedefs] [--typedefs-and-c++]
       [--update] [--help] [--version] file ...

DESCRIPTION
       The  etags  program is used to create a tag table file, in a format un-
       derstood by emacs(1); the ctags program is used to create a similar ta-
       ble  in a format understood by vi(1).  Both forms of the program under-
       stand the syntax of C, Objective C, C++, Java, Fortran, Ada, Cobol, Er-
       lang, HTML, LaTeX, Emacs Lisp/Common Lisp, Lua, makefile, Pascal, Perl,
       PHP, Postscript, Python, Prolog, Scheme and most assembler-like syntax-
       es.  Both forms read the files specified on the command line, and write
       a tag table (defaults: TAGS for etags, tags for ctags) in  the  current
       working	directory.   Files  specified with relative file names will be
       recorded in the tag table with file names  relative  to	the  directory
       where the tag table resides.  If the tag table is in /dev, however, the
       file names are made relative to the working directory.  Files specified
       with  absolute  file  names  will be recorded with absolute file names.
       Files generated from a source file--like a  C  file  generated  from  a
       source  Cweb  file--will  be recorded with the name of the source file.
       The programs recognize the language used in an input file based on  its
       file  name  and	contents.   The --language switch can be used to force
       parsing of the file names following the switch according to  the  given
       language, overriding guesses based on filename extensions.

OPTIONS
       Some  options  make  sense  only for the vi style tag files produced by
       ctags; etags does not recognize them.  The programs accept  unambiguous
       abbreviations for long option names.

       -a, --append
	      Append to existing tag file.  (For vi-format tag files, see also
	      --update.)

       -B, --backward-search
	      Tag files written in the format expected by vi  contain  regular
	      expression  search instructions; the -B option writes them using
	      the delimiter `?', to search backwards through files.   The  de-
	      fault  is  to  use the delimiter `/', to search forwards through
	      files.  Only ctags accepts this option.

       --declarations
	      In C and derived languages, create tags  for  function  declara-
	      tions,  and create tags for extern variables unless --no-globals
	      is used.

       -d, --defines
	      Create tag entries for C preprocessor constant  definitions  and
	      enum  constants,	too.   Since  this  is the default behavior of
	      etags, only ctags accepts this option.

       -D, --no-defines
	      Do not create tag entries for C  preprocessor  constant  defini-
	      tions  and  enum	constants.   This  may make the tags file much
	      smaller if many header files are tagged.	Since this is the  de-
	      fault behavior of ctags, only etags accepts this option.

       --globals
	      Create  tag entries for global variables in C, C++, Objective C,
	      Java, and Perl.  Since this is the default  behavior  of	etags,
	      only ctags accepts this option.

       --no-globals
	      Do  not  tag  global variables.  Typically this reduces the file
	      size by one fourth.  Since  this	is  the  default  behavior  of
	      ctags, only etags accepts this option.

       -i file, --include=file
	      Include  a  note in the tag file indicating that, when searching
	      for a tag, one should also consult  the  tags  file  file  after
	      checking the current file.  Only etags accepts this option.

       -I, --ignore-indentation
	      Don't rely on indentation as much as we normally do.  Currently,
	      this means not to assume that a closing brace in the first  col-
	      umn  is the final brace of a function or structure definition in
	      C and C++.

       -l language, --language=language
	      Parse the following files according to the given language.  More
	      than  one  such  options	may be intermixed with filenames.  Use
	      --help to get a list of the available languages  and  their  de-
	      fault  filename  extensions.  The `auto' language can be used to
	      restore automatic detection of language based on the file  name.
	      The  `none' language may be used to disable language parsing al-
	      together; only regexp matching is done in  this  case  (see  the
	      --regex option).

       --members
	      Create  tag entries for variables that are members of structure-
	      like constructs in C++, Objective C, Java.  This is the  default
	      for etags.

       --no-members
	      Do not tag member variables.  This is the default for ctags.

       --packages-only
	      Only tag packages in Ada files.

       --parse-stdin=file
	      May  be  used (only once) in place of a file name on the command
	      line.  etags will read from standard input and mark the produced
	      tags as belonging to the file FILE.

       -o tagfile, --output=tagfile
	      Explicit	name  of file for tag table; overrides default TAGS or
	      tags.   (But ignored with -v or -x.)

       -r regexp, --regex=regexp

	      Make tags based on regexp matching for the files following  this
	      option,  in  addition to the tags made with the standard parsing
	      based on language. May be freely intermixed with	filenames  and
	      the  -R  option.	The regexps are cumulative, i.e. each such op-
	      tion will add to the previous ones.  The regexps are of  one  of
	      the forms:
		   [{language}]/tagregexp/[nameregexp/]modifiers
		   @regexfile

	      where  tagregexp	is used to match the tag.  It should not match
	      useless characters.  If the match is such that  more  characters
	      than needed are unavoidably matched by tagregexp, it may be use-
	      ful to add a nameregexp, to narrow down the  tag	scope.	 ctags
	      ignores  regexps without a nameregexp.  The syntax of regexps is
	      the same as in emacs.  The following character escape  sequences
	      are supported: \a, \b, \d, \e, \f, \n, \r, \t, \v, which respec-
	      tively stand for the ASCII characters BEL, BS, DEL, ESC, FF, NL,
	      CR, TAB, VT.
	      The  modifiers  are  a sequence of 0 or more characters among i,
	      which means to ignore case when matching; m,  which  means  that
	      the tagregexp will be matched against the whole file contents at
	      once, rather than line by line, and the  matching  sequence  can
	      match  multiple lines; and s, which implies m and means that the
	      dot character in tagregexp matches the newline char as well.
	      The separator, which is / in the examples, can be any  character
	      different from space, tab, braces and @.	If the separator char-
	      acter is needed inside the regular expression, it must be quoted
	      by preceding it with \.
	      The optional {language} prefix means that the tag should be cre-
	      ated only for files of language language, and ignored otherwise.
	      This is particularly useful when storing many predefined regexps
	      in a file.
	      In its second form, regexfile is the name of a  file  that  con-
	      tains  a	number	of  arguments  to the --regex= option, one per
	      line.  Lines beginning with a space or tab  are  assumed	to  be
	      comments, and ignored.

	      Here  are  some examples.  All the regexps are quoted to protect
	      them from shell interpretation.

	      Tag the DEFVAR macros in the emacs source files:
	      --regex='/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/'

	      Tag VHDL files (this example is a single long line, broken  here
	      for formatting reasons):
	      --language=none --regex='/[ \t]*\(ARCHITECTURE\|\     CONFIGURA-
	      TION\) +[^ ]* +OF/' --regex='/[ \t]*\ \(ATTRIBUTE\|ENTITY\|FUNC-
	      TION\|PACKAGE\( BODY\)?\				      \|PROCE-
	      DURE\|PROCESS\|TYPE\)[ \t]+\([^ \t(]+\)/\3/'

	      Tag TCL files (this last example shows the usage	of  a  tagreg-
	      exp):
	      --lang=none --regex='/proc[ \t]+\([^ \t]+\)/\1/'

	      A regexp can be preceded by {lang}, thus restricting it to match
	      lines of files of the specified language.  Use etags  --help  to
	      obtain a list of the recognised languages.  This feature is par-
	      ticularly useful inside regex files.  A regex file contains  one
	      regex  per  line.   Empty  lines, and those lines beginning with
	      space or tab are ignored.  Lines beginning with @ are references
	      to  regex  files whose name follows the @ sign.  Other lines are
	      considered regular expressions like those following --regex.
	      For example, the command
	      etags --regex=@regex.file *.c
	      reads the regexes contained in the file regex.file.

       -R, --no-regex
	      Don't do any more regexp matching on the following  files.   May
	      be freely intermixed with filenames and the --regex option.

       -t, --typedefs
	      Record  typedefs	in  C code as tags.  Since this is the default
	      behavior of etags, only ctags accepts this option.

       -T, --typedefs-and-c++
	      Generate tag entries for typedefs, struct, enum, and union tags,
	      and C++ member functions.  Since this is the default behavior of
	      etags, only ctags accepts this option.

       -u, --update
	      Update tag entries for files specified on command line,  leaving
	      tag entries for other files in place.  Currently, this is imple-
	      mented by deleting the existing entries for the given files  and
	      then  rewriting the new entries at the end of the tags file.  It
	      is often faster to simply rebuild the entire tag	file  than  to
	      use this.  Only ctags accepts this option.

       -v, --vgrind
	      Instead of generating a tag file, write index (in vgrind format)
	      to standard output.  Only ctags accepts this option.

       -x, --cxref
	      Instead of generating a tag file, write a  cross	reference  (in
	      cxref  format)  to standard output.  Only ctags accepts this op-
	      tion.

       -h, -H, --help
	      Print  usage  information.   Followed  by  one  or  more	--lan-
	      guage=LANG prints detailed information about how tags are creat-
	      ed for LANG.

       -V, --version
	      Print the current version of the program (same as the version of
	      the emacs etags is shipped with).


SEE ALSO
       `emacs' entry in info; GNU Emacs Manual, Richard Stallman.
       cxref(1), emacs(1), vgrind(1), vi(1).


COPYING
       Copyright  (c)  1999,  2001,  2002,  2003, 2004, 2005, 2006, 2007  Free
       Software Foundation, Inc.

       Permission is granted to make and distribute verbatim  copies  of  this
       document  provided  the copyright notice and this permission notice are
       preserved on all copies.

       Permission is granted to copy and distribute modified versions of  this
       document  under	the conditions for verbatim copying, provided that the
       entire resulting derived work is distributed under the terms of a  per-
       mission notice identical to this one.

       Permission is granted to copy and distribute translations of this docu-
       ment into another language, under the  above  conditions  for  modified
       versions,  except that this permission notice may be stated in a trans-
       lation approved by the Free Software Foundation.




GNU Tools			   23nov2001			      etags(1)
